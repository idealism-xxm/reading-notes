# Execution begins at address 0 
	.pos 0
	irmovq stack, %rsp  	# Set up stack pointer
	call main		# Execute main program
	halt			# Terminate program 

# Sample linked list
    .align 8
ele1:
    .quad 0x00a
    .quad ele2
ele2:
    .quad 0x0b0
    .quad ele3
ele3:
    .quad 0xc00
    .quad 0

main:
	irmovq ele1,%rdi
	call rsum_list       # rsum_list(ele1)
	ret

# long rsum_list(list_ptr ls)
# ls in %rdi
rsum_list:
	xorq %rax,%rax	     # sum = 0
	andq %rdi,%rdi	     # Set CC
	je     return        # Goto return
	pushq  %rbx          # Save callee-saved register
	mrmovq (%rdi),%rbx   # Get ls -> val
	mrmovq 8(%rdi),%rdi  # Set arg
	call rsum_list	     # rsum_list(ls -> next)
	addq %rbx,%rax       # Add to sum
	popq %rbx            # Restore callee-saved register
return:
	ret                  # Return

# Stack starts here and grows to lower addresses
	.pos 0x200
stack:
