# Execution begins at address 0 
	.pos 0
	irmovq stack, %rsp  	# Set up stack pointer
	call main		# Execute main program
	halt			# Terminate program 

    .align 8
# Source block
src:
    .quad 0x00a
    .quad 0x0b0
    .quad 0xc00
# Destination block
dest:
    .quad 0x111
    .quad 0x222
    .quad 0x333

main:
	irmovq src,%rdi
	irmovq dest,%rsi
	irmovq $3,%rdx
	call copy_block       # copy_block(src, desc, 3)
	ret

# long copy_block(long *src, long *dest, long len)
# src in %rdi, dest in %rsi, len in rdx
copy_block:
    irmovq $8,%r8	     # Constant 8
    irmovq $1,%r9	     # Constant 1
	xorq %rax,%rax	     # result = 0
	jmp test             # Goto test
loop:
	mrmovq (%rdi),%r10   # Get *src
	xorq %r10,%rax       # result ^= *src
	rmmovq %r10,(%rsi)   # *dest = *src
    addq %r8,%rdi        # src++
    addq %r8,%rsi        # dest++
    subq %r9,%rdx        # len--
test:
	andq %rdx,%rdx	     # Set CC （把 test 写在最后可以在循环中减少一次 jmq 跳转）
	jne loop             # Go to loop
	ret                  # Return

# Stack starts here and grows to lower addresses
	.pos 0x200
stack:
